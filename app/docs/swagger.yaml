basePath: /api/v1
definitions:
  models.Product:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      updated_at:
        type: string
    type: object
  schemas.ProductCreateRequest:
    properties:
      name:
        example: iPhone 15
        type: string
      price:
        example: 999
        type: integer
    required:
    - name
    - price
    type: object
  schemas.ProductUpdateRequest:
    properties:
      name:
        example: iPhone 15 Pro
        type: string
      price:
        example: 1099
        type: integer
    type: object
  utils.ResponseGin:
    properties:
      data: {}
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Documentation for Users and Products
  title: Multi-Feature API Documentation
  version: "1.0"
paths:
  /products:
    get:
      description: Retrieve list of products with optional name filter
      parameters:
      - description: Filter by product name (case-insensitive)
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseGin'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Product'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseGin'
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/schemas.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseGin'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseGin'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseGin'
      security:
      - BearerAuth: []
      summary: Create new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.ResponseGin'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseGin'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - Products
    get:
      description: Get product details by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseGin'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseGin'
      summary: Get product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/schemas.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.ResponseGin'
            - properties:
                data:
                  $ref: '#/definitions/models.Product'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ResponseGin'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseGin'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - Products
swagger: "2.0"
